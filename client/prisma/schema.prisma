// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  ongoingJob    OngoingJob?     @relation(fields: [ongoingJobId], references: [id])
  ongoingJobId  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authenticator Authenticator[]
}

model Task {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  userId       String
  repoLink     String
  branch       String
  status       TaskStatus  @default(ON_QUEUE)
  startedAt    DateTime?
  completedAt  DateTime?
  ongoingJobId String?
  User         User        @relation(fields: [userId], references: [id])
  OngoingJob   OngoingJob?

  @@index([userId], name: "idx_user_id")
}

model OngoingJob {
  id        String   @id @default(cuid())
  taskId    String   @unique
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  userId    String
  User      User[]

  @@index([taskId], name: "idx_task_id")
}

enum TaskStatus {
  ON_QUEUE
  STARTING
  BUILDING
  COMPLETED
  FAILED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
